ctrl+shift+o
ctrl+shift+f
ctrl+shift+r
ctrl+click
alt+ > or <
ctrl+alt+s settings
ctrl+i
ctrl+space auto
emmet
multiple select replace
shift code up and down
duplicate line
delete line
all cap/ all small
ctrl+shift+a
Refactor this Ctrl+Shift+Alt+T
alt+enter

auto improt ???

    path('', include('accounts.urls')),

    from knox import views as knox_views
    path('api/auth/logout/', knox_views.LogoutView.as_view()),


    from . import views
    # in 1 dir only
    
    pip install django django-rest-knox  djangorestframework
        'rest_framework',
        'knox' 

    class LoginAPI(APIView):

        def get(self, request, id):

    class ImportContacts(models.Model): #AbstractUser
        name = models.CharField(max_length=127)

    models.CASCADE

    # before first migrations
    AUTH_USER_MODEL = "accounts.User"

    from rest_framework import serializers

    class XXX(serializers.ModelSerializer):
        class Meta:
            model = Tweet
            fields = '__all__' or ('',)

    Tweet.objects.

    except Exception as e:
        e.message
        raise Http404

    tweet = self.get_object(id)
    serialize = TweetSerializer(tweet, data=request.data) #, many=True
    if serialize.is_valid(): #raise_exception=True
        serialize.save()
        return Response(serialize.data)
    return Response(serialize.errors, status=status.HTTP_400_BAD_REQUEST)


    .delete()

    , safe=False //not needed

    permission_classes = (permissions.IsAuthenticated,)

    extra_kwargs = { 'passwprd': {'write_only': True}}

    def create(self, validated_data):
        User.objects.create_user(validated_data['username'],)

class LoginSerializer(serializers.Serializer):
    username = serializers.CharField()
    password = serializers.CharField()

    def validate(self, data):
        user = authenticate(**data)
        if user and user.is_active:
            return  user
        raise serializers.ValidationError(


from django.shortcuts import get_object_or_404

instance, token = AuthToken.objects.create(user)

demo. remove ???

user = serialize.validated_data

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication',)
}

@login_required
def index(request):
    return render(request, 'accounts/dashboard.html', {})





        index.html.
            {% load static %}
            logo
            bootstrap css,js || custom css js || bundle js
            <div id="app"></div>
  
1995  npm init
1998  npm i -D webpack webpack-dev webpack-cli @babel/core babel-loader @babel/preset-env @babel/preset-react babel-plugin-transform-class-properties react react-dom prop-types redux react-redux redux-thunk redux-devtools-extension axios react-router-dom cogo-toast
{% load static %}


"build": "webpack --mode (production/development) (--watch) <input_src> --output <op_src>"

npm run dev

static static two dir... big issue resolved // can not put dir into static file, has to go through with collectstatic
you can not use collectstatic files in dev mode... never. local files only will be serverd... mistirious.. lesson learnt

    rccp

    <Link to="/">

            {arr.map(elem => (
            ))}

    {this.props.deleteLead.bind(this, lead.id)}     
    (id, e)

    export const GET_TWEETS = "GET_TWEETS";

    import axios from "axios";

    import cogoToast from "cogo-toast";

    //       cogoToast.error(err.response.status + " : " + err.response.data.detail, {
    //         position: "bottom-center"
    //       });

    localStorage.getItem("token") //setItem//remove

    onChange = e => {this.setState({ [e.target.name] : e.target.value})};
    e.preventDefault();
    const { username, email, password, password2 } = this.state;

    tweets - 3 get, add,delete
    login - 2
    register - 2
    logout -1
    user -3 case: + 1 = 4

    token: null,
    user: null,
    isAuth: null,
    isLoading: false

    tweets: [...state.tweets, action.payload]
    tweets: state.tweets.filter(tweet => tweet.id != action.payload)


    type="text"
    maxLength={10}???

    if (this.props.isAuth) {
      return <Redirect to="/" />;
    }









dump:

# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'demo/frontend/static/')
# ]

# LOGIN_REDIRECT_URL = '/'
# LOGIN_URL = '/login/'
# LOGOUT_REDIRECT_URL = "/login/"


.
├── admin.py
├── apps.py
├── __init__.py
├── migrations
│   ├── __init__.py
├── models.py
├── src
│   ├── actions
│   │   ├── auth.js
│   │   ├── common.js
│   │   ├── tweets.js
│   │   └── types.js
│   ├── components
│   │   ├── accounts
│   │   │   ├── Login.js
│   │   │   └── Register.js
│   │   ├── App.js
│   │   ├── layout
│   │   │   └── Header.js
│   │   └── tweets
│   │       ├── Dashboard.js
│   │       ├── Form.js
│   │       └── Tweets.js
│   ├── index.js
│   ├── reducers
│   │   ├── auth.js
│   │   ├── index.js
│   │   └── tweets.js
│   └── store.js
├── static
│   └── frontend
│       ├── css
│       │   └── styles.css
│       ├── img
│       │   └── logo.png
│       └── js
│           ├── bundle.js
│           └── main.js
├── templates
│   └── frontend
│       └── index.html
├── tests.py
├── urls.py
└── views.py

#optimize
login--register API



# instahyre
session management - how works? django backend db. frontend request?? token?
packet sniffing - can it be done?
    cqrs
    ip


 1961  virtualenv -p python3 .venv
 1966  source .venv/bin/activate
 1967  pip install django
 1969  pip freeze > requirements.txt
 1970  django-admin startproject demo
 1972  django-admin startapp accounts
 1974  python manage.py makemigrations
 1975  python manage.py migrate
 1976  python manage.py createsuperuser
 1980  git init
 1981  touch .gitignore
 1983  python manage.py runserver
 1987  deactivate
 1990  git remote add origin git@github.com:saurabhmodh94/demo.git
